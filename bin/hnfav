#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup
import re
import time
from joblib import Memory
from pyfzf.pyfzf import FzfPrompt
import plumbum
import webbrowser
import argparse

BASE_URL="https://news.ycombinator.com"
re_item = re.compile(r"^item\?id=\d+")

CACHE_DIR = '~/.cache/hnfav'
memory = Memory(location=CACHE_DIR)

# Define the Hacker News username to scrape
USERNAME = "bronzecarnage"

fzf = FzfPrompt()
FZF_OPTS = "--cycle" 

@memory.cache
def extract_favorites(username):

    page = 0
    favorites = {}

    while True: 

        page = page + 1
        print(f"Fetching page {page}...", end=" ")

        # Define the base URL for the user's favorite items
        url = f"https://news.ycombinator.com/favorites?id={username}&p={page}"

        # Send a GET request to the user's favorite items page
        response = requests.get(url)

        # Parse the HTML content of the page using Beautiful Soup
        soup = BeautifulSoup(response.content, "html.parser")

        # Find all the favorite item links on the page
        things = soup.findAll("tr", {"class": "athing"})

        print(f"found {len(things)} items!")

        if not things: 
            break

        # Loop over each favorite item link and extract the title, external link, and thread link
        for athing in things:
            span = athing.find("span", {"class": "titleline"})
            a = span.find_next("a")
            external_link = a.get("href")

            if re_item.fullmatch(external_link):
                external_link = f"{BASE_URL}/{external_link}"

            title = a.get_text()
            thread_sublink = athing.find_next("tr").find("span", {"class": "subline"}).findAll("a")[-1].get("href")
            item_id = thread_sublink.replace("item?id=", "")

            thread_link = f"{BASE_URL}/{thread_sublink}" 

            favorites.update({
                f"{item_id} - {title}": { 'thread_link': thread_link, 'external_link': external_link }
                })

        time.sleep(2)

    return favorites

def parse_args():
    ap = argparse.ArgumentParser()
    ap.add_argument("-f", "--fetch", action="store_true", help="invalidate cache and fetch favorites from HN")
    args = ap.parse_args()
    return args

def main():
    args = parse_args()

    if args.fetch:
        memory.clear()

    data = extract_favorites(USERNAME)

    while True:
        try: 
            selected = fzf.prompt(data, f"{FZF_OPTS} --prompt=\"SELECT ❯ \"")
            selected = selected[0]
            while True: 
                try: 
                    link_type = fzf.prompt(data[selected], f"{FZF_OPTS} --prompt=\"OPEN LINK ❯ \" --header=\"{selected}\"")
                    link = data[selected][link_type[0]]
                    webbrowser.open_new_tab(link)
                except plumbum.commands.processes.ProcessExecutionError: #type:ignore
                    break
        except plumbum.commands.processes.ProcessExecutionError: #type:ignore
            break

if __name__ == "__main__":
    main()
