#!/bin/python3

# The above non-env shebang allows me to bypass my nix python setup and use the 
# system's python3 and packages. This is necesssary because of openGL issues in nix

# depends on the mplstyle files from https://github.com/garrettj403/SciencePlots
# USAGE: ./plot <file> <file> -o plot.pdf 

# TODO: speed up for large files: file-read can be done via np.memmap for binary
# TODO: clean up color-cycle-length to work with the new generators model
#           - potentially due to the iter(COLORS) in marker-face-colors 
# TODO: Allow continuous color maps that are fragmented over len(files)
# TODO: Add --note for notes that can be printed at the bottom of the figure

""" Name TBD: plotipy, plotti, plote, ploot, plawt, plaut, pluto

Takes in CSV files with X-Y info (or just Y info) and plots it.

- Files: with/without header, separator character
- Axes: axis label, limits, log-scale
- Plot types: Line, Scatter, Violin, Histogram, horizontal and vertical lines
- Configurable: Labels, linewidth, linestyles, markers, legend, fill
- Transformations: xscale, yscale, normalization, smoothen
"""

from scipy.interpolate import interp1d
from sklearn.linear_model import LinearRegression
import matplotlib as mpl
import matplotlib.pyplot as plt
from cycler import cycler
# import csv
from itertools import cycle, islice, repeat
import sys
import argparse
from subprocess import run
from pathlib import Path
import numpy as np
import csv

from matplotlib import ticker

from scipy.interpolate import make_interp_spline, BSpline

from mpl_toolkits.axes_grid1.inset_locator import InsetPosition

# SMOOTH: https://stackoverflow.com/questions/5283649/plot-smooth-line-with-pyplot
# COLORS: https://coolors.co/0c5da5-ffcf70-e08300-bc4b51-ac8cba-474747-225851

# COLORS = ['#0C5DA5', '#00B945', '#FF9500', '#FF2C00', '#845B97', '#474747', '#9e9e9e']
# COLORS = ["#0c5da5","#ffcf70","#e08300","#bc4b51","#ac8cba","#474747","#225851"]
# COLORS = plt.cm.viridis(np.linspace(0, 1,7))


qualitative_colormaps = ['Pastel1', 'Pastel2', 'Paired', 'Accent', 'Dark2', 'Set1', 'Set2', 'Set3', 'tab10', 'tab20', 'tab20b', 'tab20c']

def cmap_colors_to_hex(cmap_colors): 
    # USAGE: cmap_colors_to_hex(plt.cm.tab10.colors)
    return list(map(lambda x: mpl.colors.rgb2hex(x), cmap_colors))


def integral(y,x, npoints=500, kind='cubic'): 
    assert min(x) == 0.0

    # integ = [0.0]
    # for i in range(1,len(x)): 
    #     integ.append(np.trapz(y[:i+1], x=x[:i+1]))

    f = interp1d(x, y, kind=kind, fill_value='extrapolate')
    integ = []
    for xi in x: 
        xsmooth = np.linspace(0.0, xi, npoints) 
        ysmooth = f(xsmooth)
        integ.append(np.trapz(ysmooth, x=xsmooth))
        
        
    return integ

def abline(ax, slope, intercept, ls='dashed', lw=1):
    """Plot a line from slope and intercept"""
    axes = plt.gca()
    x_vals = np.array(axes.get_xlim())

    if args['xlog']: 
        x_vals = np.log10(x_vals)

    # if args['ylog']: 
    #     y_vals = np.log10(y_vals)

    y_vals = intercept + slope * x_vals

    if args['xlog']: 
        x_vals = np.power(10,x_vals)
    if args['ylog']: 
        y_vals = np.power(10,y_vals)

    ax.plot(x_vals, y_vals, ls=ls, lw=lw, c='gray')

def extrapolate(x0, y0, x, kind='linear'): 
    f = interp1d(x0, y0, kind=kind, fill_value='extrapolate')
    return f(x)

def error(x0, y0, x, y, mode=2, normalize=True):
    """
    Calculate the norm error of x,y with respect to x0,y0
    """

    f = interp1d(x0, y0, fill_value='extrapolate')
    y0new = f(x)
    dy = [ (n1 - n2) for n1, n2 in zip(y, y0new) ]

    result = np.linalg.norm(dy, ord=mode)

    if normalize:
        denom = np.linalg.norm(y0, ord=mode)
        result = result/denom

    return result 

def readCSV(data_path):
    time= []
    conc= []
    with open(data_path, newline='') as csvfile:
        # data = list(csv.reader(csvfile))
        for line in csvfile:
            data_line = line.strip().split(',')
            data_line = list(filter(None, data_line))
            if (data_line != []):
                time.append(float(data_line[0]))
                conc.append(float(data_line[1]))
    return time, conc

## MOve to h5plot
def readCadet(infile, unit, solution='outlet'):
    from cadet import Cadet
    from addict import Dict
    cadetpath = "/home/jayghoshter/local/bin/cadet-cli"
    Cadet.cadet_path = cadetpath
    sim = Cadet()
    sim.filename = infile
    sim.load()
    x = sim.root.output.solution.solution_times
    y = sim.root.output.solution['unit_' + "%03d" % unit]['solution_' + solution]
    return x, y

# def normalize(data):
#     return [ x/data[-1] for x in data ]

def normalize(data, refValue=None):
    """ Normalize array to either max value or given refValue
    """
    if refValue == 'self':
        print("No reference value for normalization provided: Using max point of curve.")
        refValue = max(data)
    return [ x/float(refValue) for x in data ]

def readArray(data_path):
    """ Read single column plain text data files 
    """
    values =[]
    with open(data_path, newline='') as csvfile:
        for line in csvfile:
            values.append(float(line.strip()))
    return values

def readColumn(data_path:str|Path, column:int, header=False):
    data = []
    delimiter = ' '
    with open(data_path, newline='') as csvfile:
        if ',' in csvfile.readline():
            delimiter = ','
    with open(data_path, newline='') as infile:
        # data = list(csv.reader(infile))
        if header:
            print(infile.readline())
        for line in infile:
            data_line = line.strip().split(delimiter)
            data_line = list(filter(None, data_line))
            if (data_line != []):
                data.append(data_line[column])
    return data

def readfile(data_path, columns=[0,1], header=False, xticksColumn=None, xticklabelsColumn=None):
    """ Read x-y CSV-style files
    """
    if ':' in data_path:
        run(['scp', '-rC', data_path, '/tmp/plotting.csv'])
        data_path = '/tmp/plotting.csv'

    x = []
    y = []
    xticks = []
    xticklabels = []
    # columns = [0, 1]
    delimiter = ' '
    with open(data_path, newline='') as csvfile:
        if ',' in csvfile.readline():
            delimiter = ','
    with open(data_path, newline='') as infile:
        # data = list(csv.reader(infile))
        if header:
            print(infile.readline())
        for line in infile:
            data_line = line.strip().split(delimiter)
            data_line = list(filter(None, data_line))
            if (data_line != []):
                if len(data_line) == 1:
                    y.append(float(data_line[0]))
                elif len(columns) == 1: 
                    y.append(float(data_line[columns[0]]))
                else:
                    x.append(float(data_line[columns[0]]))
                    y.append(float(data_line[columns[1]]))
                # if columns[0] != -1:
                #     x.append(float(data_line[columns[0]]))
                # y.append(float(data_line[columns[1]]))
                if xticksColumn is not None: 
                    xticks.append(float(data_line[xticksColumn]))
                if xticklabelsColumn is not None:
                    xticklabels.append(data_line[xticklabelsColumn])

    return x, y, xticks, xticklabels

def scale_axis(vec:list, scale_factor_or_file):
    """ Scale either the x or y axis of a given plot line
    """
    if Path(scale_factor_or_file).expanduser().exists():
        scale_factors = readArray(scale_factor_or_file)
        vec = [ v*s for v,s in zip(vec, scale_factors)]
    else: 
        scale_factor = float(scale_factor_or_file)
        vec = [ v * scale_factor for v in vec ]
    return vec

def shift_axis(vec:list, shift_factor_or_file):
    """ shift either the x or y axis of a given plot line
    """
    if Path(shift_factor_or_file).expanduser().exists():
        shift_factors = readArray(shift_factor_or_file)
        vec = [ v+s for v,s in zip(vec, shift_factors)]
    else: 
        shift_factor = float(shift_factor_or_file)
        vec = [ v + shift_factor for v in vec ]
    return vec

def setup_main_axis(ax, args):
    """ Main axis and plot setup
    """

    ax.set(title=args['title'])
    ax.set(xlabel=args['xlabel'])
    ax.set(ylabel=args['ylabel'])

    if args['xlog']:
        ax.set(xscale="log")
    if args['ylog']:
        ax.set(yscale="log")

    ax.set_aspect(args['aspect'])
    ax.autoscale(tight=True)

    if args['xlims']:
        ax.set_xlim(args['xlims'])
    if args['ylims']:
        ax.set_ylim(args['ylims'])

    if args['scitick']: 
        ax.ticklabel_format(style='sci', axis='both', scilimits=(0,0))


def setup_twin_axis(ax, args):
    """ Twin axis (parallel y axis) setup
    """
    ax.set(ylabel=args['y2label'])

    if args['y2log']:
        ax.set(yscale="log")

    ax.set_aspect(args['aspect'])
    ax.autoscale(tight=True)

    if args['y2lims']:
        ax.set_ylim(args['y2lims'])

    if args['scitick2']: 
        ax.ticklabel_format(style='sci', axis='both', scilimits=(0,0))

def plot_things(files, ax, args):
    """ High level plotter 
    Reads files, transforms, plots
    """
    xs = []
    ys = []
    lines = []

    bar_count = 0

    for filename,label,linestyle,marker,markersize,mfc,mec,mew,linewidth,zorder in zip(files, 
                                                                args['labels'], 
                                                                args['linestyles'], 
                                                                args['markers'], 
                                                                args['markersize'],
                                                                args['marker_face_colors'],
                                                                args['marker_edge_colors'],
                                                                args['marker_edge_widths'],
                                                                args['linewidths'], 
                                                                args['zorder']
                                                                ):
        print(f"Plotting: {filename}")
        if args['cadet']:
            x, y = readCadet(filename, int(args['cadet'][0]), args['cadet'][1])
            # print(x,y)
        else:
            x, y, xticks,xticklabels = readfile(filename, args['columns'], args['header'], xticksColumn=args['xticks_column'], xticklabelsColumn=args['xticklabels_column'])

        if args['normalize']:
            y = normalize(y, args['normalize'])
        if args['normalize_x']:
            x = normalize(x, args['normalize_x'])

        ## TODO: Allow this to be specified per plot line
        if args['xscale']:
            if x == []:
                x = [1] * len(y)
            x = scale_axis(x, args['xscale'])
        if args['yscale']:
            y = scale_axis(y, args['yscale'])

        ## TODO: Allow this to be specified per plot line
        if args['xshift']:
            if x == []:
                x = [0] * len(y)
            x = shift_axis(x, args['xshift'])
        if args['yshift']:
            y = shift_axis(y, args['yshift'])

        ## Unlike --xlog and --ylog, these actually scale the data
        if args['xlogify']: 
            x = np.log10(x)
        if args['ylogify']: 
            y = np.log10(y)

        if args['smoothen']: 
            xsmooth = np.linspace(min(x), max(x), args['smoothen_npoints']) 
            x_new = np.array(x)
            y_new = np.array(y)
            ordering = x_new.argsort()
            x_new = x_new[ordering]
            y_new = y_new[ordering]
            spl = make_interp_spline(x_new, y_new, k=args['smoothen'])  # type: BSpline
            ysmooth = spl(xsmooth)
            x = xsmooth
            y = ysmooth

        if args['integrate']:
            print(f"trapezoidal integral: {np.trapz(y,x)}")

        xs.append(x)
        ys.append(y)

        if len(x) > 0: 
            if args['scatter']:
                line = ax.scatter(x, y, label=label.replace('_', '-'), marker=marker, c=mfc, edgecolors=mec, s=markersize**2 if markersize else None)
                lines.append(line)
            elif args['bar']: 
                ## INPROGRESS: Assumes x column in files is 1..n, and matches in all provided input files
                indices = list(range(1,len(y)+1))
                num_files = len(files)
                width = args['bar_width']
                shiftwidth = (num_files -1 )* width / 2.0 
                position = [ bar_count * width - shiftwidth + i for i in indices]
                line = ax.bar(position,y, width=width, label=label.replace('_', '-'))
                lines.append(line)
                bar_count = bar_count + 1
                if args['xticks_column'] is not None: 
                    plt.xticks(indices,xticks)
                if args['xticklabels_column'] is not None: 
                    plt.xticks(indices,xticklabels)
            else:
                line = ax.plot(x, y, label=label.replace('_', '-'), marker=marker, markersize=markersize, markerfacecolor=mfc, markeredgewidth=mew, linestyle=linestyle, linewidth=linewidth, zorder=zorder)
                lines.extend(line)
        else:
            if args['histogram']:
                line = ax.hist(y, bins=args['histogram'])
                h,e = np.histogram(y, bins=args['histogram'])
                print(e)
            elif args['violin']:
                # pass
                line = None
            elif args['bar']: 
                ## INPROGRESS: Assumes x column in files is 1..n, and matches in all provided input files
                indices = list(range(1,len(y)+1))
                num_files = len(files)
                width = args['bar_width']
                shiftwidth = (num_files -1 )* width / 2.0 
                position = [ bar_count * width - shiftwidth + i for i in indices]
                line = ax.bar(position,y, width=width, label=label.replace('_', '-'))
                lines.append(line)
                bar_count = bar_count + 1
                x = position
                if args['xticks_column'] is not None: 
                    plt.xticks(indices,xticks)
                if args['xticklabels_column'] is not None: 
                    plt.xticks(indices,xticklabels)
            else:
                line = ax.plot(y, label=label.replace('_', '-'), marker=marker, markersize=markersize, linestyle=linestyle, linewidth=linewidth)
                lines.extend(line)
        if isinstance(args['fill'], float):
            ax.fill_between(x, y, args['fill'], interpolate=True, hatch=args['hatch'], alpha=args['fill_alpha'])
            plt.rcParams['hatch.linewidth'] = args['hatch_linewidth']
        elif isinstance(args['fill'], str): 
            _, yfill, _,_ = readfile(args['error'])
            ax.fil_between(x, y, yfill, interpolate=True, hatch=args['hatch'], alpha=args['fill_alpha'])

        if args['annotate_pointwise']: 
            x_pad = args['annotate_pointwise'][0]
            y_pad = args['annotate_pointwise'][1]
            column_idx = int(args['annotate_pointwise'][2])
            x_delta = x[0] * x_pad
            y_delta = y[0] * y_pad
            annots = readColumn(filename, column_idx)
            for ia, annot in enumerate(annots):
                ax.annotate(annot, (x[ia] + x_delta, y[ia] + y_delta))



    if args['violin']: 
        ax.violinplot(ys)
        # positions = np.arange(len(args['labels'])) + 1
        positions = np.arange(n_total_files) + 1
        plt.xticks(positions, args['labels'])
        # positions = np.arange(len(args['labels'])) + 1
        # labels = args['labels']
        # ax.xaxis.set_major_locator(ticker.FixedLocator(positions))
        # ax.xaxis.set_major_formatter(ticker.FixedFormatter(labels))

    return xs, ys, lines


ap = argparse.ArgumentParser()
ap.add_argument("files", nargs='*', help="files to plot")

ap.add_argument("-t", "--title", help="title")
ap.add_argument("-x", "--xlabel", help="xlabel")
ap.add_argument("-y", "--ylabel", help="ylabel")
ap.add_argument("-a", "--aspect", default='auto', help="Set the aspect ratio for the plot")
ap.add_argument("-fs", "--fig-size", nargs=2, default=[4.0, 3.0], type=float, help="Set the figure size for the plot")
ap.add_argument("-xl", "--xlims",nargs=2, type=float, help="x axis limits")
ap.add_argument("-yl", "--ylims",nargs=2, type=float, help="y axis limits")

ap.add_argument("-rx", "--reverse-x", action='store_true', help="reverse x axis direction")
ap.add_argument("-ry", "--reverse-y", action='store_true', help="reverse y axis direction")

ap.add_argument("-xtx", "--xticks", nargs='*', type=float, help="x axis tick positions")
ap.add_argument("-xtl", "--xtick-labels", nargs='*', help="x axis tick labels")
ap.add_argument("-ytx", "--yticks", nargs='*', type=float, help="y axis tick positions")
ap.add_argument("-ytl", "--ytick-labels", nargs='*', help="y axis tick labels")

# TODO: Clean up
ap.add_argument("--xticks-column", type=int, help="Column from input files to count as xticks")
ap.add_argument("--xticklabels-column", type=int, help="Column from input files to count as xtick labels")

ap.add_argument("--bar-width", type=float, default=0.25, help="Width of bar in bar charts")

ap.add_argument("-ap", "--annotate-pointwise", nargs=3, type=float, help="Annotate individual points. 3 args: <xpad> <ypad> <column_index_for_annot_labels>")

ap.add_argument("--no-axis", action='store_true', help='remove axis borders, ticks, and labels')

ap.add_argument("--scitick", choices=['x', 'y', 'both'], help="Apply scientific tick label formatting")
ap.add_argument("--scitick2", choices=['x', 'y', 'both'], help="Apply scientific tick label formatting to axis 2")

ap.add_argument("-ls", "--linestyles", nargs='*', help="linestyles = solid dashed ...")
ap.add_argument("-lw", "--linewidths", nargs='*', help="linewidth = 0.1 2 ...")
ap.add_argument("-l", "--labels", nargs='*', help="legend labels")
ap.add_argument("-z", "--zorder", nargs='*', type=int, help="zorder for each plot")
ap.add_argument("-m", "--markers", nargs='*', help="markers = s, o, ...")
ap.add_argument("-ms", "--markersize", nargs='*', type=float, help="Size of markers")
ap.add_argument("-mfc", "--marker-face-colors", nargs='*', help="marker face colors")
ap.add_argument("-mec", "--marker-edge-colors", nargs='*', help="marker edge colors")
ap.add_argument("-mew", "--marker-edge-widths", nargs='*', help="marker edge colors")

ap.add_argument("-lci", "--line-color-indices", nargs='*', type=int, help="Indices to line colors. Can specify two curves have the same color by repeating the index.")
ap.add_argument("-lci2", "--line-color-indices2", nargs='*', type=int, help="Indices to line colors. Can specify two curves have the same color by repeating the index.")

ap.add_argument("-hg", "--histogram", type=int, help="histogram")

ap.add_argument("-c", "--columns", nargs='*', default = [0,1], type = int, help="columns to plot as x, y. (Partially implemented)")
ap.add_argument("-s", "--separator", default=',', help="separator character")

ap.add_argument("-f", "--fill", type=float, help="fill area between provided curve and horizontal baseline at given y value.")
ap.add_argument("--fill-color", help="fill area color")
ap.add_argument("--fill-alpha", default=0.2, type=float, help="Alpha for filled area")
ap.add_argument("--hatch", default='xxx', help="hatch style for filled areas")
ap.add_argument("--hatch-linewidth", type=float, default=0.5, help="hatch linewidth for filled areas")

ap.add_argument("--color-cycle-length", type=int, help="Number of colors to cycle through for each line")
ap.add_argument("-cmap", "--colormap", default='tab10', help="Matplotlib colormap to use")

ap.add_argument("--header", action='store_true', help="CSV file contains header labels")

ap.add_argument("-nl", "--no-legend", action='store_true', help="don't show legend")
ap.add_argument("--legend", nargs=3, default=['upper center', '0.5', '-0.2'], type=str, help="Legend settings: --legend <location> <bbox_to_anchor>")
ap.add_argument("--legend-frameon", action='store_true', help="Draw frame around legend")
ap.add_argument("--legend-size", default='medium', help="Legend font size:int or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}")
ap.add_argument("--legend-ncol", default=1, type=int, help="Number of columns in legend")

ap.add_argument("--smoothen", nargs='?', type=int, const=3, help="(Cubic) spline interpolation through provided data. --smoothen <order>, with default order=3")
ap.add_argument("--smoothen-npoints", default=250, type=int, help="Number of points to use for --smoothen interpolation")

ap.add_argument("-g", "--gradient", action='store_true', help='Use np.gradient() to get derivative')

ap.add_argument("--resample", help="Resample curve at points specified in this file")
ap.add_argument("--reaverage", type=int, help="Average curve into specified number of cells")
ap.add_argument("--reaverage-cylindrical", type=int, help="Average curve into specified number of cells")

ap.add_argument("--integrate", action='store_true', help="Trapezoidal integration of curves. Use xshift to move baseline.")

ap.add_argument("-n", "--normalize", nargs='?', const='self', help="normalize y data to given value or 'self'")
ap.add_argument("-nx", "--normalize-x", nargs='?', const='self', help="normalize y data to given value or 'self'")
ap.add_argument("-xs", "--xscale", help="Scale the x axis for all plots by a numerical value or text file with every value")
ap.add_argument("-ys", "--yscale", help="Scale the y axis for all plots by a numerical value or text file with every value")
ap.add_argument("--xshift", help="shift the x axis for all plots by a numerical value or text file with every value")
ap.add_argument("--yshift", help="shift the y axis for all plots by a numerical value or text file with every value")


ap.add_argument("-hl", "--hlines", nargs='*', type=float, help="Add horizontal lines at these y values")
ap.add_argument("-vl", "--vlines", nargs='*', type=float, help="Add vertical lines at these x values")
ap.add_argument("--line", nargs=2, type=float, action='append', help="Add line with <slope> and <intercept>")
ap.add_argument("--fit-lines", action='store_true', help="Fit a linear regression through given set of datapoints")

ap.add_argument("--error", help="Calculate RMSE for data with this file as reference")

ap.add_argument("--extrapolate", nargs='?', const='linear', help="extrapolate the given curve")

ap.add_argument("--xlog", action='store_true', help="X axis in log scale")
ap.add_argument("--ylog", action='store_true', help="Y axis in log scale")

ap.add_argument("--xlogify", action='store_true', help="Plot log of x axis data")
ap.add_argument("--ylogify", action='store_true', help="Plot log of y axis data")

ap.add_argument("--scatter", action='store_true', help="Show a scatter plot")
ap.add_argument("--violin", action='store_true', help="Show a violin plot")
ap.add_argument("--bar", action='store_true', help="Show a bar plot")

ap.add_argument("-o", "--output", help="output file")
ap.add_argument("-w", "--write", nargs='*', help="Write the CSV file (after applying rescaling if any)")
ap.add_argument("--split", action='store_true', help="Split the data into x and y.")

ap.add_argument("--cadet", nargs=2, help="Read h5 files. --cadet <unit_num> <solution_path>")

ap.add_argument("--style", nargs='*', default=['science'], help="Change the plotting style with SciencePlots")

ap.add_argument("--twinx", nargs='*', default = [], help="Files to plot on an alternate y axis")
ap.add_argument("-y2", "--y2label", help="ylabel for second axis")
ap.add_argument("-y2l", "--y2lims",nargs=2, type=float, help="y axis limits for second axis")
ap.add_argument("--y2log", action='store_true', help="Y2 axis in log scale")
ap.add_argument("-cmap2", "--colormap2", choices = qualitative_colormaps, default='tab10', help="Matplotlib colormap to use for second axis")
# ap.add_argument("--color-cycle2-length", type=int, help="Number of colors to cycle through for each line")

ap.add_argument("--inset", help='One file to plot as inset')
ap.add_argument("--inset-plot", choices=['plot', 'hist'], default='plot', help='Type of inset plot')

ap.add_argument("--print-stats", action='store_true')
 
args = vars(ap.parse_args())

n_total_files = len(args['files']) + len(args['twinx'])

# NOTE: Using generators/iterators instead of lists allows us to use labels,
# linestyles, markers and linewidths as a pool for both main and twin axes.
# This way only some flags need to be duplicated.

if not args['labels']:
    args['labels'] = iter(args['files'] + args['twinx'])
else: 
    args['labels'] = iter(args['labels'])

if not args['linestyles']:
    args['linestyles'] = iter( [ 'solid' ] * n_total_files ) 
    # args['linestyles'] = []
elif len(args['linestyles']) < n_total_files:
    args['linestyles'] = islice(cycle(args['linestyles']), n_total_files )
else: 
    args['linestyles'] = iter(args['linestyles'])

if not args['markers']:
    args['markers'] = iter([ None ] * n_total_files)
    # args['markers'] = []
elif len(args['markers']) == 1:
    args['markers'] = iter(args['markers'] * n_total_files)
else: 
    args['markers'] = iter(args['markers'])

if not args['markersize']:
    args['markersize'] = iter([ None ] * n_total_files)
    # args['markersize'] = []
elif len(args['markersize']) == 1:
    args['markersize'] = iter(args['markersize'] * n_total_files)
else: 
    args['markersize'] = iter(args['markersize'])

if not args['marker_edge_widths']:
    args['marker_edge_widths'] = iter([ None ] * n_total_files)
    # args['marker_edge_widths'] = []
elif len(args['marker_edge_widths']) == 1:
    args['marker_edge_widths'] = iter(args['marker_edge_widths'] * n_total_files)
else: 
    args['marker_edge_widths'] = iter(args['marker_edge_widths'])

if not args['linewidths']:
    args['linewidths'] = iter([ 1 ] * n_total_files)
    # args['linewidths'] = []
elif len(args['linewidths']) == 1:
    args['linewidths'] = iter(args['linewidths'] * n_total_files)
else: 
    args['linewidths'] = iter(args['linewidths'])

if not args['zorder']:
    args['zorder'] = iter(range(1,n_total_files+1))
    # args['zorder'] = []
elif len(args['zorder']) == 1:
    args['zorder'] = iter(args['zorder'] * n_total_files)
else:
    args['zorder'] = iter(args['zorder'])


cmap = mpl.cm.get_cmap(name=args['colormap'])
if 'colors' in cmap.__dict__: 
    COLORS = cmap.colors[:args['color_cycle_length']]
    print("Discrete colormap")
else: 
    COLORS = [cmap(1.*i/(n_total_files-1)) for i in range(n_total_files)]
    print("Continuous colormap")

if args['line_color_indices']: 
    COLORS = [ COLORS[i] for i in args['line_color_indices']]
custom_cycler = cycler('color', COLORS)

COLORS2 = COLORS[len(args['files']):] + COLORS[:len(args['files'])]
# COLORS2 = plt.cm.get_cmap(args['colormap']).colors[:args['color_cycle_length']]
if args['line_color_indices2']: 
    COLORS2 = [ COLORS2[i] for i in args['line_color_indices2']]
custom_cycler2 = cycler('color', COLORS2)

if not args['marker_face_colors']:
    args['marker_face_colors'] = cycle(COLORS)
elif len(args['marker_face_colors']) == 1:
    args['marker_face_colors'] = iter(args['marker_face_colors'] * n_total_files)
else:
    args['marker_face_colors'] = iter(args['marker_face_colors'])

if not args['marker_edge_colors']:
    args['marker_edge_colors'] = cycle(COLORS)
elif len(args['marker_edge_colors']) == 1:
    args['marker_edge_colors'] = iter(args['marker_edge_colors'] * n_total_files)
else:
    args['marker_edge_colors'] = iter(args['marker_edge_colors'])

with plt.style.context(args['style']):


    # plt.rcParams.update({
    #     "font.family": ["serif"],  
    #     "mathtext.fontset": "dejavuserif",  
    #     "font.serif": ["DejaVu Serif"],  
    #     "font.size":10})          

    ## A way to override the default style
    if args['legend_frameon']:
        plt.rcParams.update({
            "legend.shadow": True,
            "legend.frameon": True })
    else: 
        plt.rcParams.update({
            "legend.shadow": False,
            "legend.frameon": False })

    fig, ax = plt.subplots(figsize=args['fig_size'])
    ax.set_prop_cycle(custom_cycler)

    xtx, xtl = plt.xticks()

    if args['xticks']:
        xtx = args['xticks']
    if args['xtick_labels']:
        xtl = args['xtick_labels']

    if args['xticks'] or args['xtick_labels']: 
        plt.xticks(xtx, xtl)

    yty, ytl = plt.yticks()

    if args['yticks']:
        yty = args['yticks']
    if args['ytick_labels']:
        ytl = args['ytick_labels']

    if args['yticks'] or args['ytick_labels']: 
        plt.yticks(yty, ytl)


    setup_main_axis(ax, args)

    if args['no_axis']: 
        ax.axis('off')

    xs, ys, lines = plot_things(args['files'], ax, args)

    lines2=[]
    if args['twinx']:
        ax2 = ax.twinx()
        ax2.set_prop_cycle(custom_cycler2)
        setup_twin_axis(ax2, args)
        xs2, ys2, lines2 = plot_things(args['twinx'], ax2, args)

    if args['fit_lines']: 
        ## TODO: Move it somewhere better
        for x,y,filename in zip(xs, ys, args['files']): 
            X = np.array(x)
            Y = np.array(y)

            ordering = X.argsort()
            X = X[ordering].reshape(-1,1)
            Y = Y[ordering]

            if args['xlog']: 
                X = np.log10(X)
            if args['ylog']: 
                Y = np.log10(Y)

            model = LinearRegression()
            model.fit(X, Y)

            score = model.score(X,Y)
            abline(ax, model.coef_, model.intercept_, lw=2, ls='dashed')
            print(f"{filename}: R2={score} | m={model.coef_} | c={model.intercept_}")

    if args['error']: 
        x0, y0, _,_ = readfile(args['error'])
        print(f"Reference file: {args['error']}")
        errors = []
        for x,y,filename in zip(xs, ys, args['files']): 
            value = error(x0,y0,x,y)
            errors.append(value)
            print(f"{filename}: error = {value}")

        # figbar, axbar = plt.subplots(figsize=args['fig_size'])
        # axbar.plot(range(len(errors)), errors)

    ## TODO: Connect with --smoothen
    if args['extrapolate']:
        xlim = ax.get_xlim()
        xsmooth = np.linspace(xlim[0], xlim[1], 250) 
        for x,y,filename in zip(xs, ys, args['files']): 
            ysmooth = extrapolate(x,y,xsmooth, kind=args['extrapolate'])
            plt.plot(xsmooth, ysmooth, label=f"{args['extrapolate']} extrapolation")

    if args['resample']: 
        _, xnew, _,_ = readfile(args['resample'], columns=[0])
        for x,y,filename in zip(xs, ys, args['files']): 
            ynew = extrapolate(x,y,xnew, kind='linear')

            with open(f'{filename}_resampled.csv', 'w') as f:
                writer = csv.writer(f, delimiter=',')
                writer.writerows(zip(xnew, ynew))
        
    if args['reaverage']:
        nRegions = args['reaverage']
        nShells = nRegions + 1 #Including r = 0
        rShells = []
        for x,y,filename in zip(xs, ys, args['files']): 
            x_left = min(x)
            x_right = max(x)
            assert x_left == 0.0
            for n in range(nShells):
                rShells.append(x_right * (n/nRegions))

            x_avg = []
            y_avg = []

            for radIn, radOut in zip(rShells[:-1], rShells[1:]+rShells[:0]):
                xnew = np.linspace(radIn, radOut, 250)
                ynew = extrapolate(x,y,xnew, kind='linear')
                x_center = (radIn + radOut)/2
                yval = np.trapz(ynew, x=xnew) / (radOut - radIn)
                x_avg.append(x_center)
                y_avg.append(yval)

            with open(f'{filename}_reaveraged_{args["reaverage"]}.csv', 'w') as f:
                writer = csv.writer(f, delimiter=',')
                writer.writerows(zip(x_avg, y_avg))

    if args['reaverage_cylindrical']:
        nRegions = args['reaverage_cylindrical']
        nShells = nRegions + 1 #Including r = 0
        rShells = []
        for x,y,filename in zip(xs, ys, args['files']): 
            x_left = min(x)
            x_right = max(x)
            assert x_left == 0.0
            for n in range(nShells):
                rShells.append(x_right * (n/nRegions))

            npoints = 500
            x_avg = []
            y_avg = []

            yf = interp1d(x, y, kind='cubic', fill_value='extrapolate')
            ## WARNING: TODO: Use scipy.integrate.cumulative_trapezoid instead
            inty = integral(y,x)
            intyf = interp1d(x, inty, kind='cubic', fill_value='extrapolate')

            for radIn, radOut in zip(rShells[:-1], rShells[1:]+rShells[:0]):
                x_center = (radIn + radOut)/2
                xs_left = np.linspace(0, radIn, npoints)
                xs_right= np.linspace(0, radOut, npoints)
                ## int_{radIn}^{radOut} 2*pi* r * y(r) * dr
                yval = radOut * np.trapz( yf(xs_right), x=xs_right) - radIn * np.trapz(yf(xs_left), xs_left) - (np.trapz(intyf(xs_right), x=xs_right) - np.trapz(intyf(xs_left), x=xs_left))
                yval = 2* np.pi * yval / ( np.pi * (radOut**2 - radIn**2))
                x_avg.append(x_center)
                y_avg.append(yval)

            with open(f'{filename}_reaveraged_cyl_{args["reaverage_cylindrical"]}.csv', 'w') as f:
                writer = csv.writer(f, delimiter=',')
                writer.writerows(zip(x_avg, y_avg))


    ## TODO: update style for these
    if args['hlines']:
        xlim = ax.get_xlim()
        ax.hlines(args['hlines'], xlim[0], xlim[1])

    if args['vlines']:
        ylim = ax.get_ylim()
        ax.vlines(args['vlines'], ylim[0], ylim[1])

    if args['line']: 
        for line in args['line']: 
            abline(line[0], line[1])


    if args['reverse_x']: 
        xlim = ax.get_xlim()
        ax.set_xlim((xlim[1], xlim[0]))

    if args['reverse_y']: 
        ylim = ax.get_ylim()
        ax.set_ylim((ylim[1], ylim[0]))

    # ax.annotate('$11.11 \\times$ better', xy=(2, 1200),  xycoords='data',
    #             xytext=(0.8, 0.4), textcoords='axes fraction',
    #             arrowprops=dict(facecolor='black', shrink=0.05),
    #             horizontalalignment='center', verticalalignment='top',
    #             )
    #

    # # INPROGRESS: 
    # # if args['inset']: 
    # inset_ax = fig.add_axes([0,0,1,1])
    # ip = InsetPosition(ax, [0.55,0.60,0.4,0.3])
    # inset_ax.set_axes_locator(ip)
    # inset_ax.tick_params(axis='x', labelsize=8)
    # inset_ax.tick_params(axis='y', labelsize=8)
    # inset_ax.xaxis.offsetText.set_fontsize(8)
    # inset_ax.set_title('Particle Size Distribution', fontsize=8)
    # # inset_ax.get_xaxis().set_visible(False)
    # # inset_ax.get_yaxis().set_visible(False)
    # x, y, _ = readfile(args['inset'])
    # if args['inset_plot'] == 'hist': 
    #     line = inset_ax.hist(y, bins=20)
    # else: 
    #     inset_ax.plot(x,y)

    if args['print_stats']:
        for filename in args['files']:
            x, y, xticks,xticklabels = readfile(filename, args['columns'], args['header'], xticksColumn=args['xticks_column'], xticklabelsColumn=args['xticklabels_column'])
            print(f"file: {filename}")
            print(f"xrange: [{min(x)}, {max(x)}] | xdelta: {max(x) - min(x)}")
            print(f"yrange: [{min(y)}, {max(y)}] | ydelta: {max(y) - min(y)}")
            print(f"ymean: {np.mean(y)}")
            print(f"ystd: {np.std(y)}")
        sys.exit(0)

    if args['output']:

        if not args['no_legend']:
            all_lines = lines + lines2 
            all_labels = [l.get_label() for l in all_lines]
            ax.legend(all_lines, all_labels, loc=args['legend'][0], bbox_to_anchor=(float(args['legend'][1]),float(args['legend'][2])), shadow=True, fontsize=args['legend_size'], ncol=args['legend_ncol'])

        fig.savefig(args['output'], dpi=300)

    else:

        if not args['no_legend']:
            all_lines = lines + lines2 
            all_labels = [l.get_label() for l in all_lines]
            ax.legend(all_lines, all_labels, loc="upper left", shadow=True, fontsize=args['legend_size'], ncol=args['legend_ncol'])

        plt.show()

    if args['write']:
        for filename,newname,x,y in zip(args['files'], args['write'], xs, ys):
            with open(newname, 'w') as f:
                writer = csv.writer(f, delimiter=',')
                writer.writerows(zip(x, y))

    if args['gradient']:
        for filename,x,y in zip(args['files'], xs, ys):
            with open(Path(filename).stem + '_gradient.csv', 'w') as f:
                writer = csv.writer(f, delimiter=',')
                writer.writerows(zip(x, np.gradient(y,x)))

    if args['split']:
        import csv
        for filename,x,y in zip(args['files'], xs, ys):
            with open(filename + '.x', 'w') as f:
                writer = csv.writer(f, delimiter=',')
                writer.writerows(zip(x))
            with open(filename + '.y', 'w') as f:
                writer = csv.writer(f, delimiter=',')
                writer.writerows(zip(y))

