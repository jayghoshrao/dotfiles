#!/usr/bin/env python

"""
MIRROR/MIR (rewritten)
- rsync wrapper to sync files within a given directory to/from servers
- requires a .mirrors file in the root directory of sync
    - line format: <name> <path/to/server/root>
    - example: jureca jureca12:/p/project/cjibg12/scratch

USAGE: 
    `mir push TARGETS...-d`
    `mir pull SOURCE`

WARNINGS:
    - rsync can be dangerous if not used properly
    - .git folder is currently ignored by default
"""

# TODO: Find all .mirror files in all parents and mash them together. Closest file should override farthest file.
# TODO: Set autocompletable choices for sources and targets from remotes.keys()
# TODO: Allow diffing with remotes
# TODO: Allow setting root folder via args
# TODO: mirror list <remote> should list current dir on remote
# TODO: mirror tree <remote> should list current tree on remote
# TODO: mirror log should show list of push/pull. Can place it in the dir of the yaml file. Can keep it in default excludes.

# TODO: Handle UUID:path for mountable disks
# remote_name: <qualifier>:<remote_root_path> or <remote_root_path>
# qualifier can be 'ssh' or a given UUID
# When UUID is given it should mount the drive and resolve the new path automatically.

## On diffing
# - Not that easy w.r.t. getting an exact diff for all files since we would have to perform a comparison across ssh => transfer data.
# - Maybe first perform a checksum tree for the dirs, transmit the file and compare locally. Then for the files with mismatched checksums, transmit them and see diffs.
# - But this still involves performing an operation on the remote: finding checksums of all files. How does rsync do this?
# - rsync -avncr --out-format="%C %f" /remote/dir-changed/ reference/dir/ 
#     - So with rsync, we just run it twice: get list of changed checksums, check it against an exclude filter (for object files .o), and sync these to a local dir and perform my local diff.

import os
import sys
import time
import argparse
import subprocess
from rich import print
from rich.pretty import pprint
from ruamel.yaml import YAML
from pathlib import Path
from dataclasses import dataclass, field

from importlib.util import spec_from_loader, module_from_spec
from importlib.machinery import SourceFileLoader 

spec = spec_from_loader("diskutils", SourceFileLoader("diskutils", Path('/home/jayghoshter/bin/diskutils.py').expanduser().as_posix() ))
diskutils = module_from_spec(spec)
spec.loader.exec_module(diskutils)

yaml = YAML(typ='safe')

# COMMAND='rsync'
# ARGS=['']

PRECMD="rsync -avzhPr"
PRECMDLIST = PRECMD.split()

@dataclass
class Config:
    remotes: dict[str,str] = field(default_factory=dict)
    files: list[str] = field(default_factory=list)
    excludes: list[str] = field(default_factory=list) 
    includes: list[str] = field(default_factory=list) 
    mode: str = field(default_factory=str)
    dry_run: bool = False
    mkdir: bool = False
    delete: bool = False
    delete_excluded: bool = False

    def update(self, in_dict):
        for key in self.__dataclass_fields__: 
            if not in_dict.get(key):
                continue
            self.__dict__[key] = in_dict.get(key)

def findup(name, path:Path):
    while str(path) != '/':
        files = [ p.name for p in path.glob('*') if p.is_file() ]
        if name in files:
            return path 
        path = path.parent

## NOTE: Unsure if it's necessary to have a cumulatively patched ini file. 
## Why would we need this functionality if we could just create one at the root and use that?
## Do we just use the first encountered .mirrors file as root? 
## we would need cumulative patching if we have more than just remotes in the config files, such as excludes etc. We then only specify the excludes in the current folder? Per subfolder excludes
# def parse_ini_cumulatively(name, path:Path):
#     remotes = {}
#     paths = []
#     while str(path) != '/':
#         files = [ p.name for p in path.glob('*') if p.is_file() ]
#         if name in files:
#             remotes.update(readINI(path / name))
#             paths.append(path)
#         path = path.parent
#     return path[0]

def find_and_parse(filename=".mirrors.yaml", parser=yaml.load):
    cwd = Path().resolve()
    root = findup(filename, cwd)
    if root is not None:
        print("found root: ", root)
        return root, parser(root / filename)
    return None, {}

def find_files(ignore_files=[], ignore_dirs=['.git']):
    # return [ p for p in Path('.').rglob('*') if p.is_file() and STATEDIR not in p.parents]
    ignore_dirs = [Path(dir) for dir in ignore_dirs]
    ignore_files = [Path(f) for f in ignore_files]

    files = [ p for p in Path('.').rglob('*') if p.is_file() ]

    for dir in ignore_dirs:
        files = list(filter(lambda f: dir not in f.parents, files))
    for ignore_file in ignore_files:
        files = list(filter(lambda f: ignore_file != str(f), files))

    return files

def readINI(filestring):
    dictionary = {}
    arr = []
    try:
        with open(filestring, "r") as fp:
            for line in fp:
                arr = line.strip().split(' ')
                dictionary[arr[0]] = ' '.join(arr[1:])
    except:
        raise RuntimeError("Error: .mirrors file not found!")

    return dictionary

def is_elevated():
    return os.getuid() == 0

def rerun_in_elevated_subshell():
    print("Restarting in elevated subshell")
    runner = os.path.abspath(sys.executable)
    arguments = [os.path.abspath(sys.argv[0])] + sys.argv[1:]
    command = [ "sudo", runner ] + arguments
    out = subprocess.run(command)
    sys.exit(out.returncode)

def resolve_remote(remotestr:str):
    """
    remote_name: <qualifier>:<remote_root_path> OR <remote_root_path>
    <qualifier> can be an ssh remote or a disk UUID. If it is a UUID, we 
    mount the disk and resolve the full path. ssh remote qualifiers are 
    allowed to passthrough as rsync handles them internally.
    """
    if ':' in remotestr:
        qualifier, remote_root_path = remotestr.split(':')
        devname = diskutils.find_disk_by_uuid(qualifier)
        if devname:
            mountpoint = diskutils.get_mountpoint(devname)
            if mountpoint:
                return (Path(mountpoint) / remote_root_path).as_posix()

            if is_elevated():
                return (Path(diskutils.mount(devname)) / remote_root_path).as_posix()
            else:
                rerun_in_elevated_subshell()
    

    # TODO: Check if qualifiers are valid ssh remotes

    return remotestr


def push(files, targets, remotes, root, mkdir=False):
    PRECMDLIST.append('--relative')
    if targets == ['all']:
        targets = [ x for x in remotes ]
    for target in targets:
        if target in remotes:
            cmdlist = PRECMDLIST[:]
            if files:
                for file in files:
                    cmdlist.append(file)
            else:
                cmdlist.append('.')
            remote_path = str(Path(remotes[target]) / Path('.').resolve().relative_to(str(root)) ) + os.sep
            cmdlist.append(remote_path)

            if mkdir: 
                mkdir_cmd = f'mkdir -p { str(Path(remotes[target])).split(":")[-1] / Path(".").resolve().relative_to(str(root))}{os.sep}'
                if ':' in remotes[target]:
                    mkdir_cmd = f'ssh {target} {mkdir_cmd}' 
                print(mkdir_cmd)
                subprocess.run(mkdir_cmd.split())

            print(cmdlist)
            print(" ".join(cmdlist))
            subprocess.run(cmdlist)
        else:
            raise RuntimeError(f"Remote {target} not found. Please check {root}/.mirrors.")

def pull(files, source, remotes, root):
    if source in remotes:
        cmdlist = PRECMDLIST[:]
        if files != [] and files is not None:
            PRECMDLIST.append('--relative')
            for file in files:
                # The additional dot in the source paths ensures that we pull directory structure relative to current directory.
                cmdlist.append(str(Path(remotes[source]).as_posix() / Path('.').resolve().relative_to(str(root))) + '/./' + file )
        else: 
            cmdlist.append(str(Path(remotes[source]) / Path('.').resolve().relative_to(str(root))) + os.sep)
        cmdlist.append('.')
        print(cmdlist)
        print(" ".join(cmdlist))
        subprocess.run(cmdlist)

def run_command(cmdlist: list[str], capture_output=False):
    print(cmdlist)
    result = subprocess.run(cmdlist, capture_output=capture_output, text=True)
    # print(result.stdout)
    # if result.returncode != 0:
    #     print(result.stderr)
    return result

def run_ssh_command(remote:str, command:str, dir):
    cmd = ['ssh', remote, f"cd {Path(dir).as_posix()} && {command}" ]
    result = run_command(cmd)
    return result

def parse_args():
    ap = argparse.ArgumentParser()

    # meg = ap.add_mutually_exclusive_group()
    # meg.add_argument("-t", "--target", nargs='*', help="target servers")
    # meg.add_argument("-s", "--source", help="source server")

    subparsers = ap.add_subparsers(dest='mode')

    sub_push = subparsers.add_parser('push', help='PUSH to multiple sources')
    sub_push.add_argument('target', nargs='*', help="target servers")
    sub_push.add_argument('-f', '--files', nargs='*', help='files or directories to sync')
    sub_push.add_argument('-e', '--excludes', nargs='*', action='extend', default = ['.git', '.mypy_cache', '__pycache__' ], help='exclude PATTERN')
    sub_push.add_argument('-i', '--includes', nargs='*', action='extend', default = [], help='include PATTERN. Do not exclude these files.')

    sub_pull = subparsers.add_parser('pull', help='pull from ONE source')
    sub_pull.add_argument('source', nargs='?', help="target servers")
    sub_pull.add_argument('-f', '--files', nargs='*', help='files or directories to sync')
    sub_pull.add_argument('-e', '--excludes', nargs='*', action='extend', default = ['.git', '.state', '.mypy_cache', '__pycache__' ], help='exclude PATTERN')
    sub_pull.add_argument('-i', '--includes', nargs='*', action='extend', default = [], help='include PATTERN. Do not exclude these files.')

    sub_cmd = subparsers.add_parser('cmd', help='Run command on remote in corresponding directory')
    sub_cmd.add_argument('command', nargs='*', help='Command to execute')
    sub_cmd.add_argument('--target', nargs='*', help='Command to execute')

    sub_diff= subparsers.add_parser('diff', help='list remotes found in .mirrors file')
    sub_diff.add_argument('diff', help="target servers")

    sub_edit= subparsers.add_parser('edit', help='list remotes found in .mirrors file')

    ap.add_argument('-ne', '--no-excludes', action='store_true', default=False, help='Ignore excludes')
    ap.add_argument("-y", "--no-confirm", action='store_true', help="Don't prompt before syncing data")
    ap.add_argument("-d", "--dry-run", action='store_true', help="Only show which commands will run")
    ap.add_argument("-m", "--mkdir", action='store_true', help="Run `mkdir -p` to enforce folder creation before sync")
    ap.add_argument("--delete", action='store_true', help="delete extraneous files on the receiver. Only works when syncing dirs, not individual files")
    ap.add_argument("--delete-excluded", action='store_true', help="delete excluded files as well")

    ## Multi-pass parsing to allow arbitrary ordering of subparser and parser commandline args
    args, extra_args_list = ap.parse_known_args()
    args, extra_args_list = ap.parse_known_args(extra_args_list, args)
    return args, extra_args_list
    # args = vars(args)

def main():
    args, extra_args_list = parse_args()
    config = Config()

    root = None
    root_yaml, config_yaml = find_and_parse('.mirrors.yaml', yaml.load)
    if config_yaml:
        config.update(config_yaml)
        root = root_yaml

    config.update(vars(args))

    if config.remotes:
        for tag, remote_path in config.remotes.items():
            if (config.mode=='push' and tag in (args.target or [])) or (config.mode=='pull' and tag==args.source):
                config.remotes[tag] = resolve_remote(remote_path)

    if root:
        pprint(config, expand_all=True)
    else:
        return

    if not config.mode:
        return

    # if not args['files']:
    #     args['files'] = ['.']

    PRECMDLIST.extend(extra_args_list)

    if config.delete:
        PRECMDLIST.append('--delete')

    if config.delete_excluded:
        PRECMDLIST.append(f"--delete-excluded")

    if config.dry_run:
        PRECMDLIST.append(f"--dry-run")

    # NOTE: Include must come before exclude. Order matters somehow.
    if not args.no_excludes:
        for item in config.includes: 
            PRECMDLIST.append(f"--include={item}")
        for item in config.excludes: 
            PRECMDLIST.append(f"--exclude={item}")

    if config.mode == 'push' and args.target: 
        assert all(t in config.remotes.keys() for t in args.target)
        warn = 'y' if args.no_confirm else input(f"PUSH to {args.target}? (y/Y/ENTER to continue)")
        if warn.lower() == 'y' or warn == '': 
            push(config.files, args.target, config.remotes, root, mkdir=config.mkdir)
    elif config.mode == 'pull' and args.source:
        assert args.source in config.remotes.keys()
        warn = 'y' if args['no_confirm'] else input(f"PULL from {args.source}? (y/Y/ENTER to continue)")
        if warn.lower() == 'y' or warn == '': 
            pull(config.files, args.source, config.remotes, root)
    elif config.mode == 'diff':
        pass
        # Get full paths of dirs
        # Find a difflib
    elif config.mode == 'edit':
        editor = os.environ.get('EDITOR', 'vi')
        print(f"Opening config file: {root / '.mirrors.yaml'}")
        time.sleep(1)
        subprocess.run([editor, root / '.mirrors.yaml'])
    elif config.mode == 'cmd':
        assert all(t in config.remotes.keys() for t in args.target)
        for target in args.target:
            remotedir= str(Path(config.remotes[target]) / Path('.').resolve().relative_to(str(root)) ) + os.sep
            if ':' in remotedir:
                remote, dir = remotedir.split(':')
                res = run_ssh_command(remote, ' '.join(args['command']), dir)
                sys.exit(res.returncode)
            else:
                res = run_command(args['command'])
                sys.exit(res.returncode)

if __name__ == "__main__":
    main()
