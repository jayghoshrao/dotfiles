#!/usr/bin/env bash

## An upgrade to filer
## Because I'm bored and sometimes have OCD
## NOTE: Already added to zshrc, this is only for backup

# TODO: Add option for COMMAND type, not just files and urls
# Thus I can use this for preview in command completions

urlregex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
DEBUG="OFF"
MODE="EDIT"

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -p|--print)
            shift # past value
            MODE="PRINT"
            ;;
        -d|--debug)
            DEBUG="ON"
            shift # past value
            ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


if [[ -n "$@" ]]; then
    FILES="$@"
else
    ## Space separated
    # read -r FILES

    ## Newline separated, becuase fzf pipes
    FILES=()
    while read -r line; do
        # echo "> $line"
        FILES+=( "$line" )
    done
fi

open()
{
    nohup "$@" > /dev/null 2>&1 & disown
}

guiopen()
{
    nohup xdg-open "$@" >/dev/null 2>&1 & disown
}

special()
{
    # FILE="$@"
    FILE=$(realpath "$@")
    FILEBASENAME=$(basename "$FILE")
    [[ "$FILEBASENAME" =~ "." ]] && EXT=${FILEBASENAME##*.} || EXT=""
    FILETYPE="$(file --mime-type "$FILE" | awk -F ': ' '{print $2}')"

    if [[ "$FILE" =~ $urlregex ]]; then
        if [[ -x $(command -v urler.sh) ]]; then
            urler.sh "$FILE"
        else
            guiopen "$FILE"
        fi
    else
        guiopen "$FILE"
    fi

}

driver()
{
    FILE=$(realpath "$@")
    FILEBASENAME=$(basename "$FILE")
    [[ "$FILEBASENAME" =~ "." ]] && EXT=${FILEBASENAME##*.} || EXT=""
    FILETYPE="$(file --mime-type "$FILE" | awk -F ': ' '{print $2}')"

    if [[ "$FILETYPE" == "inode/symlink" ]]; then
        driver "$(readlink -f "$FILE")"
    fi

    if [[ "$DEBUG" == "ON" ]]; then
        echo "file=$FILE"
        echo "filebasename=$FILEBASENAME"
        echo "ext=$EXT"
        echo "c[0]=${FILEBASENAME:0:1}"
        echo "filetype=$FILETYPE"
        echo "------------------"
    fi

    if [[ "$MODE" == "EDIT" ]]; then
        case "$FILETYPE" in
            "inode/directory"         ) builtin cd "$FILE"            ; return ;;
            "inode/x-empty"           ) $EDITOR "$FILE"               ; return ;;
            "application/octet-stream") dex -e "$FILE"                ; return ;;
            "text/html"               ) guiopen "$FILE"               ; return ;;
            "application/pdf"         ) guiopen "$FILE"               ; return ;;
            "application/json"        ) $EDITOR "$FILE"               ; return ;;
            "text/plain"              ) $EDITOR "$FILE"               ; return ;;
            text/*                    ) $EDITOR "$FILE"               ; return ;;
            *                         ) special "$FILE"               ; return ;;
        esac
    elif [[ "$MODE" == "PRINT" ]]; then
        case "$FILETYPE" in
            "inode/directory"         ) ls --color "$FILE"                    ; return ;;
            "inode/x-empty"           ) cat "$FILE"                   ; return ;;
            "application/octet-stream") dex -p "$FILE"                ; return ;;
            "text/html"               ) cat "$FILE"                   ; return ;;
            "application/pdf"         ) pdftotext "$FILE" -           ; return ;;
            "application/json"        ) cat "$FILE"                   ; return ;;
            "text/plain"              ) cat "$FILE"                   ; return ;;
            text/*                    ) cat "$FILE"                   ; return ;;
            *                         ) file --mime-type "$FILE"      ; return ;;
        esac
    fi

}

for FILE in "${FILES[@]}"; do
    driver "$FILE"
done
