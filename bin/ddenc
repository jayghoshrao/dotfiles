#!/bin/python3

# TODO: Handle rollstrings with infinite | separations: +1|d8+5|d5+10 etc
# DONE: Integrate with fplay | dgen
# TODO: Easy add creatures: HP from file?
# DONE: Implement preset conditions to be applied
# TODO: parseargs: allow multiple enc files, roland-like wrapper
    # TODO: Elaborate plan
# DONE: Read Roll Values from the info files as command
# TODO: Move away from a while loop. Let 'next/prev' command change the attacker.
# DONE: Handle multi in fzf for attack target

# NOTE: - Weapon (Style): +HIT | d20+5 | damagetype
# NOTE: Attack of Opportunity is best self inflicted
# NOTE: Summonned creatures act on their summoner's turn


# FIXME: Adding one creature when only one currently exists creates creature with same name without suffix.
# FIXME: creatures[] list sorting happens due to overriden __eq__ and __lt__ based on init. So any indexing happens based only on init.
    # so creatures.index(attacker) returns the first creature that has the same init as attacker.
    # in other words, find a better way to sort the thing. or don't fully overwrite __eq__?

import os
import sys
import csv
from random import seed, randint
from collections import OrderedDict
import tkinter
from rich import print
from rich.console import Console
from rich.table import Column, Table
from rich.text import Text
from iterfzf import iterfzf
from functools import total_ordering
from os import listdir
# from os.path import isfile, join

CONDITIONS= [ 'Blinded', 'Charmed', 'Deafened', 'Fatigued', 'Frightened', 'Grappled', 'Incapacitated', 'Invisible', 'Paralyzed', 'Petrified', 'Poisoned', 'Prone', 'Restrained', 'Stunned', 'Unconscious', 'Exhaustion' ]

def parse_fchar(indata):
    arr = ['name', 'hit points', 'armor class', 'proficiencies', 'weapon', 'reaction', 'spell']
    out = []
    lines = indata.split('\n')
    for line in lines:
        for tag in arr:
            if tag.lower() in line.lower():
                out.append(line)
    out = '\n'.join(out)
    return out

def print_rich_table(creatures):
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("Name")
    table.add_column("HP")
    table.add_column("Condition")
    for creature in creatures:
        table.add_row( creature.name, str(creature.hp) , creature.cond)
    console.print(table)


def print_info_gui(attacker, defender):
    infostring = attacker + '\n\n------------\n\n' + defender
    for widget in frame.winfo_children():
        widget.destroy()
    frame.pack_forget()
    frame.grid_forget()
    frame.pack()
    lab = tkinter.Label(frame,text=infostring, anchor="w", width=200, justify="left")
    lab.config(font=("Cascadia Code", 16))
    lab.pack(fill='both')

def rollwrap(string):
    string = string.split(';')[0]
    for item in string.split('|'):
        rollstr = Text(item)
        rollstr.stylize(0, 20, "bold white")
        console.print(rollstr + ":", roll(str(rollstr)), style="bold white")

def roll(string):
    if ';' in string:
        splitstring=string.split(';')
        return roll(splitstring[0])
    elif string.strip() == '':
        return 0
    elif string.strip()[0] == '+':
        return roll('1d20' + string.strip())
    elif string.strip()[0] == '-':
        return roll('1d20' + string.strip())
    elif '+' in string:
        rollsum = 0
        splitstring = string.split('+')
        for item in splitstring:
            rollsum = rollsum + roll(item.strip())
        return rollsum
    elif '/' in string:
        splitstring = string.split('/')
        return roll(splitstring[0])/roll(splitstring[1])
    elif '*' in string:
        splitstring = string.split('*')
        return roll(splitstring[0])*roll(splitstring[1])
    elif '-' in string:
        splitstring = string.split('-')
        return roll(splitstring[0]) - roll(splitstring[1])
    else:
        try:
            if(string[0] == 'a'):
                console.print("Rolling with Advantage!", style="bold blue")
                r1 = roll_nds(string[1:])
                r2 = roll_nds(string[1:])
                return max(r1, r2)
            elif(string[0] == 'z'):
                console.print("Rolling with Disadvantage!", style="bold blue")
                r1 = roll_nds(string[1:])
                r2 = roll_nds(string[1:])
                return min(r1, r2)
            else:
                return roll_nds(string)
        except:
            print("Something is wrong. Rolling 0.")
            return 0

def roll_nds(string):
    if 'd' in string:
        try:
            n = int(string.split('d')[0])
        except:
            n = 1
        s = int(string.split('d')[1])
        rolls = [ randint(1,s) for i in range(n)]
        maxrolls = [s for i in range(n)]

        # NOTE: Only applies on multiple dice when EVERY hit is critical.
        # But since advantage and disadvantage are rolled as two separate dice
        # we can see crits and fumbles on ad20 and zd20, just not on 5d20
        if (maxrolls == rolls):
            console.print("CRITICAL ROLL!", style="bold yellow")
        elif (rolls == [1]*n):
            console.print("FUMBLED ROLL!", style="bold red")

        return (sum(rolls))
    else:
        try:
            return int(string)
        except:
            return 0



def read_info(filename):
    if filename == '':
        return ''
    try:
        infile = open(filename, "r")
        out = infile.read()
        infile.close()
        if 'name' in out[0:5].lower(): ## This is for integration with dgen/fplay
            out = parse_fchar(out)
        return out
    except:
        return ''

# Individual Creature
@total_ordering
class Creature:
    name=None
    hp=0
    init=0
    prob=0
    cond=None
    info=None

    def __init__(self, name_, hp_, init_, info_):
        self.name=name_
        self.hp=hp_
        self.init=init_
        self.info=info_ or ''
        # print(self.name, self.init)

    def __eq__(self, other):
        return self.init == other.init

    def __lt__(self, other):
        return self.init < other.init

    def damage(self, dmg):
        self.hp = self.hp - dmg
        if self.hp <= 0:
            self.hp = 0
            self.cond = "Unconcious/Dead"
            console.print(self.name, "is dead!", style="bold red")

    def condition(self, cond_):
        # if cond_ != '':
        #     self.cond = cond_
        if cond_ == None:
            self.cond = None
        else:
            self.cond = ', '.join(cond_)
        # if self.cond == '':
        #     self.cond = None

    def attack(self, other, *args, **kwargs):
        atkstr = kwargs.get('atk', None)
        dmgstr = kwargs.get('dmg', None)

        console.print("Attacking", other.name, style="bold magenta")
        print_info_gui(self.info, other.info)

        if atkstr is None:
            atkstr = input("roll for ATK: ")

        try:
            if atkstr[0] == '+':
                atkstr = '1d20' + atkstr
        except:
            pass

        atk = roll(atkstr)
        print("Attack Roll (" + atkstr + "): ", atk)

        if dmgstr is None:
            dmgstr = input("roll for DMG: ")
        dmg = roll(dmgstr)
        print("Damage Roll (" + dmgstr + "):", dmg)

        confirm = input("Apply " + str(dmg) + " Damage: ")
        if (confirm == ''):
            other.damage(dmg)
            console.print("Doing " , dmg , " damage to " , other.name, style='bold yellow')
        else:
            dmg = int(confirm)
            other.damage(dmg)
            console.print("Doing " , dmg , " damage to " , other.name, style='bold yellow')


class Encounter:
    creatures = []

    def parsefile(self, filename):
        with open(filename, mode='r') as infile:
            reader = csv.reader(infile)
            for rows in reader:
                self.creatures.extend(self.parseline(rows))
        self.creatures = sorted(self.creatures, reverse=True)

    def parseline(self, line):
        try:
            name_str = line[0].strip()
            num_str = line[1].strip()
            hp_str = line[2].strip()
            init_str = line[3].strip()
            prob_str = line[4].strip()
            if name_str[0] == '#':
                return []
            if prob_str == '':
                prob_str = '100'
        except:
            return []

        try:
            offset = int(line[5].strip())
        except:
            offset = 0

        try:
            prob = roll(prob_str)
        except:
            prob = 100

        if prob > 100 or prob < 1:
            prob = 0
        prob_threshold = roll("d100")
        if(prob > prob_threshold):
            num = roll(num_str)
        else:
            num=0

        creatures = []
        for number in range(num):
            suffix = str(number+1+offset)
            if num == 1:
                suffix = ''
            creatures.append(Creature(name_str + suffix, roll(hp_str), roll(init_str), read_info(name_str)))

        if init_str != '0' and num > 0 and prob > prob_threshold:
            print("Spawned", num, name_str+"s")

        return creatures

    def run(self):
        iround=0
        while 1:
            if len(self.creatures) < 1:
                print("No Encounter!")
                break

            prompt = console.input("[bold yellow]Add Creatures? ((s)tring|(f)zf):[/] ")
            if prompt == 's':
                console.print("Add Creatures? <name>, <num>, <hp>, <init>, <prob>, <num_offset>")
                self.creatures.extend(enc.parseline(input("->").split(',')))
                self.creatures = sorted(self.creatures, reverse=True)
            elif prompt == 'f':
                mypath = '.'
                onlyfiles = [files for files in listdir(mypath) if os.path.isfile(os.path.join(mypath, files))]
                creature = iterfzf(onlyfiles)
                print_info_gui(read_info(creature), "")
                num = console.input("[bold yellow]Number: [/]")
                hp = console.input("[bold yellow]HP: [/]")
                init = console.input("[bold yellow]Initiative roll: [/]")
                offset = console.input("[bold yellow]Suffix Offset: [/]")
                arr = [creature, num, hp, init, '100', offset]
                self.creatures.extend(enc.parseline(arr))
                self.creatures = sorted(self.creatures, reverse=True)



            print_rich_table(self.creatures)

            iround= iround+1
            turn=0
            actions = [ 'roll', 'attack', 'condition']

            for attacker in self.creatures:
                turn = turn + 1
                print("\n=== ROUND [" , iround , "] TURN [" , turn , "]: " , "[bold yellow]" + attacker.name + "[/bold yellow]", "[", "[bold red] "+ str(attacker.cond)  + " [/bold red]", "]" , " ===")

                iattack=1
                print_info_gui(attacker.info, "")

                print('[bold green] What to do (a|r|c): [/bold green] [', iattack, ']: ', end='')
                action_str = input().strip()

                while action_str != '':
                    action = list(filter(None, action_str.split(' ')))
                    command = action[0]

                    try:
                        arg = action[1]
                    except:
                        arg = ''

                    if command == "r":
                        print("You rolled (" + arg + ")", roll(arg))
                    elif command == "a":
                        whos = iterfzf([ c.name for c in self.creatures ] , prompt = "== " + attacker.name + "[" + str(iattack) + "]" + " == ", query=arg, multi=True)
                        for who in whos:
                            who = next((c for c in self.creatures if c.name == who), None)
                            if who is None:
                                print('[bold green] What to do (a|r|c): [/bold green] [', iattack, ']: ', end='')
                                action_str = input().strip()
                                continue
                            attacker.attack(who)
                        print_rich_table(self.creatures)
                        iattack = iattack + 1
                    elif command == "c":
                        whos = iterfzf([ c.name for c in self.creatures ] , prompt = "== " + attacker.name + "[" + str(iattack) + "]" + " == ", query=arg, multi=True)
                        for who in whos:
                            who = next((c for c in self.creatures if c.name == who), None)
                            if who is None:
                                print('[bold green] What to do (a|r|c): [/bold green] [', iattack, ']: ', end='')
                                action_str = input().strip()
                                continue
                            # who.condition(input("Apply Condition to " + who.name + ":"))
                            who.condition(iterfzf(CONDITIONS, prompt = "Apply Condition to " + who.name + ': ', multi=True))
                        print_rich_table(self.creatures)
                        iattack = iattack + 1
                    elif command == "s":
                        console.print("Add Creatures? <name>, <num>, <hp>, <init>, <prob>, <num_offset>")
                        summons = enc.parseline(input("->").split(','))
                        for s in summons:
                            s.init = attacker.init

                        pos = -1
                        for c in self.creatures:
                            pos = pos+1
                            if c.name == attacker.name:
                                break

                        self.creatures[pos+1:pos+1] = summons   #insert at position
                        self.creatures = sorted(self.creatures, reverse=True)
                        print_rich_table(self.creatures)
                    elif command == "x":
                        whos = iterfzf([ c.name for c in self.creatures ] , prompt = "== " + attacker.name + "[" + str(iattack) + "]" + " == ", query=arg, multi=True)
                        for who in whos:
                            who = next((c for c in self.creatures if c.name == who), None)
                            if who is None:
                                print('[bold green] What to do (a|r|c): [/bold green] [', iattack, ']: ', end='')
                                action_str = input().strip()
                                continue
                            print_info_gui(attacker.info, who.info)
                            infolines = list(filter(None, attacker.info.split('\n')))
                            rolls = [ item.strip() for item in infolines if item.strip()[0] == '-' or 'weapon' in item.lower() or 'spell' in item.lower()]
                            selected = iterfzf(rolls, prompt = "== Attacking " + who.name + " ==")
                            try:
                                rolls = selected.split(':')[1].split('|')
                                attacker.attack(who, atk=rolls[0], dmg=rolls[1])
                            except:
                                pass
                        print_rich_table(self.creatures)
                        iattack = iattack + 1
                    elif command == "o":
                        whos = iterfzf([ c.name for c in self.creatures ] , prompt = "== " + attacker.name + "[" + str(iattack) + "]" + " == ", query=arg, multi=True)
                        for who in whos:
                            who = next((c for c in self.creatures if c.name == who), None)
                            os.system('fplay "' + who.name + '"')
                    else:
                        console.print("Bad Command", style="bold red")
                    print('[bold green] What to do (a|r|c): [/bold green] [', iattack, ']: ', end='')
                    action_str = input().strip()


            print('\n===========================')
            print("=== End of Round [" , iround , "] ===")
            print('===========================')



seed(a=None, version=2)
console = Console()
console.print("Welcome to the DND Encounter Handler", style="bold red")

root = tkinter.Tk()
frame = tkinter.Frame(root, width=1000, height=300)
frame.pack()
lab = tkinter.Label(frame,text="Awaiting start of combat!")
lab.config(font=("Cascadia Code", 20))
lab.pack()

enc = Encounter()
enc.parsefile(sys.argv[1])
enc.run()
