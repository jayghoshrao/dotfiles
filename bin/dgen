#!/bin/env python3

# DONE: Handle rollstrings with infinite | separations: +1|d8+5|d5+10 etc
# TODO: Handle spell rolls from fdfil/fdnd spell: HARD because spells can be cast at higher levels
# Can possibly handle this as info dump in ddenc? OR +1|standard level| next level addition | next level addition etc.

# TODO: Split into multiple files.
# TODO: Multiclassing

# TODO: argparse for full random or manual
# TODO: Implement Armor
# DONE: implement spells
# DONE: Implement saving throws (class based)
# TODO: Backgrounds, feats
# TODO: Expertise
# DONE: Implement basic weapons
# DONE: implement race stat mods
# DONE: Fix finesse weapons dexterity
# DONE: Implement ASI
# DONE: Implement Sneak Attack Damage

# NOTE: Might consider ASI updates before corresponding levels for hitpoints
# NOTE: Best used for early levels, then updated manually (especially for HP)
# NOTE: Implement levelup, might help if we take it step by step
# TODO: Full character handler in python, exports to fplay text file?

# NOTE: Requires fdfil in PATH for spells to work

# TODO: fdfil spell '.name == "SPELL NAME"' .roll | cut -d $'\t' -f 2

import os
import sys
import json
from random import randint
from rich.console import Console
from rich.text import Text
from collections import OrderedDict
from iterfzf import iterfzf

finesse = [ 'Dagger', 'Dart', 'Rapier', 'Scimitar', 'Shortsword', 'Whip']
ranged = ['Shortbow', 'Crossbow light', 'Longbow', 'Crossbow hand', 'Crossbow heavy', 'Dart', 'Sling', 'Blowgun', 'Net']

weapons = {
        'Club'           : '1d4' ,
        'Dagger'         : '1d4' ,
        'Greatclub'      : '1d8' ,
        'Handaxe'        : '1d6' ,
        'Javelin'        : '1d6' ,
        'Light hammer'   : '1d4' ,
        'Mace'           : '1d6' ,
        'Quarterstaff'   : '1d6' ,
        'Sickle'         : '1d4' ,
        'Spear'          : '1d6' ,
        'Crossbow light' : '1d8' ,
        'Dart'           : '1d4' ,
        'Shortbow'       : '1d6' ,
        'Sling'          : '1d4' ,
        'Battleaxe'      : '1d8' ,
        'Flail'          : '1d8' ,
        'Glaive'         : '1d10',
        'Greataxe'       : '1d12',
        'Greatsword'     : '2d6' ,
        'Halberd'        : '1d10',
        'Lance'          : '1d12',
        'Longsword'      : '1d8' ,
        'Maul'           : '2d6' ,
        'Morningstar'    : '1d8' ,
        'Pike'           : '1d10',
        'Rapier'         : '1d8' ,
        'Scimitar'       : '1d6' ,
        'Shortsword'     : '1d6' ,
        'Trident'        : '1d6' ,
        'War pick'       : '1d8' ,
        'Warhammer'      : '1d8' ,
        'Whip'           : '1d4' ,
        'Blowgun'        : '1'   ,
        'Crossbow hand'  : '1d6' ,
        'Crossbow heavy' : '1d10',
        'Longbow'        : '1d8' ,
        'Net'            : '0'
        }

racial_stat_bonus = {
        "human": {
            'strength'    : 1,
            'dexterity'   : 1,
            'constitution': 1,
            'intelligence': 1,
            'wisdom'      : 1,
            'charisma'    : 1
        },
        "hill dwarf": {
            'constitution': 2,
            'wisdom': 1
        },
        "mountain dwarf": {
            'constitution': 2,
            'strength': 2
        },
        "high elf": {
            'dexterity': 2,
            'intelligence': 1
        },
        "wood elf": {
            'dexterity': 2,
            'wisdom': 1
        },
        "dark elf": {
            'dexterity': 2,
            'charisma': 1
        },
        "lightfoot halfling":{
            'dexterity': 2,
            'charisma': 1
        },
        "stout halfling":{
            'dexterity': 2,
            'constitution': 1
        },
        "dragonborn": {
            'strength': 2,
            'charisma': 1
        },
        "forest gnome": {
            'intelligence': 2,
            'dexterity': 1
        },
        "rock gnome": {
            'intelligence': 2,
            'constitution': 1
        },
        "half-elf": {
            'charisma': 2,
            #additional choice increase
        },
        "half-orc": {
            'strength': 2,
            'constitution': 1
        },
        "tiefling": {
            'intelligence': 1,
            'charisma': 2
        },
        "None": {
        }

}

class_saves = {
    'Barbarian': ['strength', 'constitution'],
    'Bard': ['dexterity', 'charisma'],
    'Cleric': ['wisdom', 'charisma'],
    'Druid': ['intelligence', 'wisdom'],
    'Fighter': ['strength', 'constitution'],
    'Monk': ['strength', 'dexterity'],
    'Paladin': ['wisdom', 'charisma'],
    'Ranger': ['strength', 'dexterity'],
    'Rogue': ['dexterity', 'intelligence'],
    'Sorcerer': ['constitution', 'charisma'],
    'Warlock': ['wisdom', 'charisma'],
    'Wizard': ['intelligence', 'wisdom']
}

class_hitdice = {
    'Barbarian': 12,
    'Bard': 8,
    'Cleric': 8,
    'Druid': 8,
    'Fighter': 10,
    'Monk': 8,
    'Paladin': 10,
    'Ranger': 10,
    'Rogue': 8,
    'Sorcerer': 6,
    'Warlock': 8,
    'Wizard': 6
}

def roll(string):
    if string.strip() == '':
        return 0
    elif '+' in string:
        rollsum = 0
        splitstring = string.split('+')
        for item in splitstring:
            rollsum = rollsum + roll(item.strip())
        return rollsum
    elif '/' in string:
        splitstring = string.split('/')
        return roll(splitstring[0])/roll(splitstring[1])
    elif '*' in string:
        splitstring = string.split('*')
        return roll(splitstring[0])*roll(splitstring[1])
    elif '-' in string:
        splitstring = string.split('-')
        return roll(splitstring[0]) - roll(splitstring[1])
    else:
        try:
            if(string[0] == 'a'):
                console.print("Rolling with Advantage!", style="bold blue")
                r1 = roll_nds(string[1:])
                r2 = roll_nds(string[1:])
                return max(r1, r2)
            elif(string[0] == 'z'):
                console.print("Rolling with Disadvantage!", style="bold blue")
                r1 = roll_nds(string[1:])
                r2 = roll_nds(string[1:])
                return min(r1, r2)
            else:
                return roll_nds(string)
        except:
            print("Something is wrong. Rolling 0.")
            return 0

def roll_nds(string):
    if 'd' in string:
        try:
            n = int(string.split('d')[0])
        except:
            n = 1
        s = int(string.split('d')[1])
        rolls = [ randint(1,s) for i in range(n)]
        maxrolls = [s for i in range(n)]

        return (sum(rolls))
    else:
        try:
            return int(string)
        except:
            return 0

class Character:
    name = "character"
    HP = 0
    level = 1
    stats = { 'strength'    : 0,
            'dexterity'   : 0,
            'constitution': 0,
            'intelligence': 0,
            'wisdom'      : 0,
            'charisma'    : 0 }
    mods = []
    proficiencies = []
    proficiency_bonus = 0
    skills = {}


    def __init__(self, name, level):
        print("Creating", name)
        self.name = name
        self.race = iterfzf(racial_stat_bonus)
        self.roll_stats(racial_stat_bonus[self.race])
        if self.race == 'half-elf':
            self.asi_update()
        self.level = int(level)
        self.Class = iterfzf(class_hitdice)
        self.hitDiceSides = class_hitdice[self.Class]

        self.asi = [ 4, 8, 12, 16, 19]
        if self.Class == 'Fighter':
            self.asi = [4, 6, 8, 12, 14, 16, 19]
        for item in self.asi:
            if self.level > item:
                self.asi_update()

        self.mods = {x:int((self.stats[x]-10)/2) for x in self.stats.keys()}
        # console.print(self.mods)

        self.HP = roll(str(self.level-1) + 'd' + str(self.hitDiceSides) + '+' + str((self.level)*self.mods['constitution'] + self.hitDiceSides))
        self.proficiency_bonus = int((self.level - 1)/4) + 2
        self.AC = 10

        self.skills = {
                'acrobatics'     : 0,
                'animal handling': 0,
                'arcana'         : 0,
                'athletics'      : 0,
                'deception'      : 0,
                'history'        : 0,
                'insight'        : 0,
                'intimidation'   : 0,
                'investigation'  : 0,
                'medicine'       : 0,
                'nature'         : 0,
                'perception'     : 0,
                'performance'    : 0,
                'persuasion'     : 0,
                'religion'       : 0,
                'sleight of hand': 0,
                'stealth'        : 0,
                'survival'       : 0
                }
        self.weapons = iterfzf(weapons, multi=True) or []

        try:
            os.system('fdfil spell \'.classes | contains("' + self.Class +'")\' .dummy> ~/.cache/dgen')
            spellfile=open(os.path.expanduser('~/.cache/dgen'))
            spells=spellfile.readlines()
            spells = [ item.strip() for item in spells ]
            # spells = { item.split(',')[0].strip():item.split(',')[1].strip() for item in spells }
            spellfile.close()
            self.spells = iterfzf(spells, multi=True) or []
            # self.spells = { key: spells[key] for key in spells.keys() if key in selected}
            # print(self.spells)
        except:
            pass

    def asi_update(self):
        statslist = [ self.stats[x] for x in self.stats.keys()]
        asi_stats = iterfzf(self.stats, multi=True, prompt = str(statslist))
        try:
            if (len(asi_stats)) == 1:
                self.stats[asi_stats[0]] = self.stats[asi_stats[0]] + 2
            elif (len(asi_stats)) == 2:
                self.stats[asi_stats[0]] = self.stats[asi_stats[0]] + 1
                self.stats[asi_stats[1]] = self.stats[asi_stats[1]] + 1
        except:
            pass


    def roll_stats(self, scoredict):
        rolls_total = 0
        for key in self.stats:
            rolls = []
            for i in range(4):
                rolls.append(roll_nds('d6'))
            rolls = sorted(rolls, reverse=True)[:-1]
            self.stats[key] = (sum(rolls))
            rolls_total = rolls_total + sum(rolls)
            if key in scoredict:
                self.stats[key] = self.stats[key] + scoredict[key]
            print(key + ': ', self.stats[key])
        console.print("[bold yellow]Total: [/]", rolls_total)
        print("Note: Values above are after adding racial bonuses at level 1.")
        prompt = console.input("[bold red]Change Stats? (y/any)[/]")
        if prompt == 'y':
            for key in self.stats:
                self.stats[key] = int(console.input("[bold yellow]" + key + ": [/]"))

    def update_skills(self):
        self.skills = {
                'acrobatics': self.mods['dexterity'],
                'animal handling': self.mods['wisdom'],
                'arcana': self.mods['intelligence'],
                'athletics': self.mods['strength'],
                'deception': self.mods['charisma'],
                'history': self.mods['intelligence'],
                'insight': self.mods['wisdom'],
                'intimidation': self.mods['charisma'],
                'investigation': self.mods['intelligence'],
                'medicine': self.mods['wisdom'],
                'nature': self.mods['intelligence'],
                'perception': self.mods['wisdom'],
                'performance': self.mods['charisma'],
                'persuasion': self.mods['charisma'],
                'religion': self.mods['intelligence'],
                'sleight of hand': self.mods['dexterity'],
                'stealth': self.mods['dexterity'],
                'survival': self.mods['wisdom'],
        }

        try:
            self.skills.update({x:self.skills[x]+self.proficiency_bonus for x in self.skills.keys() if x in self.proficiencies})
        except:
            pass

    def write(self):
        with open(self.name, 'w') as fp:
            fp.write('name: ' + self.name + '\n')
            fp.write('race: ' + str(self.race) + '\n')
            fp.write('class: ' + str(self.Class) + '\n')
            fp.write('level: ' + str(self.level) + '\n')
            fp.write('hit points: ' + str(self.HP) + '\n')
            fp.write('hit dice: ' + '1d' + str(class_hitdice[self.Class]) + '\n')
            fp.write('armor class: ' + str(self.AC) + '\n')
            fp.write('initiative: ' + '{:+d}\n'.format(self.mods['dexterity']))
            fp.write('proficiencies: ' + ', '.join(self.proficiencies) + '\n')
            fp.write('proficiency bonus: ' + '{:+d}\n'.format(self.proficiency_bonus))
            for key in self.stats:
                fp.write(key + ' score' + ': ' + '{:d}\n'.format(self.stats[key]))
            for key in self.mods:
                fp.write(key + ' modifier' + ': ' + '{:+d}\n'.format(self.mods[key]))
            for key in self.skills:
                fp.write(key + ': ' + '{:+d}\n'.format(self.skills[key]))
            for item in self.weapons:
                if item in finesse:
                    bonus = max(self.mods['strength'], self.mods['dexterity'])
                elif item in ranged:
                    bonus = self.mods['dexterity']
                else:
                    bonus = self.mods['strength']
                fp.write('- Weapon ' + item + ': ' + '{:+d}'.format(bonus + self.proficiency_bonus) + '|' + weapons[item] + '+' + str(bonus) + '\n')
            if self.Class == "Rogue":
                fp.write('Sneak Attack Damage: ' + str(int((self.level + 1)/2)) + 'd6' + '\n')
            for item in self.spells:
                fp.write('- Spell ' + item + ': ' + '\n')
            for item in self.mods.keys():
                if item in class_saves[self.Class]:
                    fp.write(item + ' save: ' +'{:+d}\n'.format(self.mods[item] + self.proficiency_bonus))
                else:
                    fp.write(item + ' save: ' +'{:+d}\n'.format(self.mods[item]))


console = Console()
name = console.input("[bold yellow]Character Name: [/]")
level = console.input("[bold yellow]Character Level: [/]")
char = Character(name, level)
char.proficiencies = iterfzf(char.skills, multi=True) or []
char.update_skills()
char.write()

